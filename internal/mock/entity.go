// Code generated by MockGen. DO NOT EDIT.
// Source: entity.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	persistence "github.com/madjlzz/madprobe/internal/persistence"
	reflect "reflect"
)

// MockPersister is a mock of Persister interface
type MockPersister struct {
	ctrl     *gomock.Controller
	recorder *MockPersisterMockRecorder
}

// MockPersisterMockRecorder is the mock recorder for MockPersister
type MockPersisterMockRecorder struct {
	mock *MockPersister
}

// NewMockPersister creates a new mock instance
func NewMockPersister(ctrl *gomock.Controller) *MockPersister {
	mock := &MockPersister{ctrl: ctrl}
	mock.recorder = &MockPersisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPersister) EXPECT() *MockPersisterMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockPersister) Insert(entity *persistence.Entity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockPersisterMockRecorder) Insert(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockPersister)(nil).Insert), entity)
}

// Get mocks base method
func (m *MockPersister) Get(name string) (*persistence.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(*persistence.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockPersisterMockRecorder) Get(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPersister)(nil).Get), name)
}

// GetAll mocks base method
func (m *MockPersister) GetAll() ([]*persistence.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*persistence.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockPersisterMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPersister)(nil).GetAll))
}

// Delete mocks base method
func (m *MockPersister) Delete(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockPersisterMockRecorder) Delete(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPersister)(nil).Delete), name)
}

// MockPersistCloser is a mock of PersistCloser interface
type MockPersistCloser struct {
	ctrl     *gomock.Controller
	recorder *MockPersistCloserMockRecorder
}

// MockPersistCloserMockRecorder is the mock recorder for MockPersistCloser
type MockPersistCloserMockRecorder struct {
	mock *MockPersistCloser
}

// NewMockPersistCloser creates a new mock instance
func NewMockPersistCloser(ctrl *gomock.Controller) *MockPersistCloser {
	mock := &MockPersistCloser{ctrl: ctrl}
	mock.recorder = &MockPersistCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPersistCloser) EXPECT() *MockPersistCloserMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockPersistCloser) Insert(entity *persistence.Entity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockPersistCloserMockRecorder) Insert(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockPersistCloser)(nil).Insert), entity)
}

// Get mocks base method
func (m *MockPersistCloser) Get(name string) (*persistence.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(*persistence.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockPersistCloserMockRecorder) Get(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPersistCloser)(nil).Get), name)
}

// GetAll mocks base method
func (m *MockPersistCloser) GetAll() ([]*persistence.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*persistence.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockPersistCloserMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPersistCloser)(nil).GetAll))
}

// Delete mocks base method
func (m *MockPersistCloser) Delete(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockPersistCloserMockRecorder) Delete(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPersistCloser)(nil).Delete), name)
}

// Close mocks base method
func (m *MockPersistCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockPersistCloserMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPersistCloser)(nil).Close))
}
